/* OPTIMAL PAGE REPLACMENT ALGORITHM */

 
#include <stdio.h>

int n;  // Number of frames

int findmax(int a[]) {
    int max = a[0], k = 0;
    for (int i = 1; i < n; i++) {
        if (a[i] > max) {
            max = a[i];
            k = i;
        }
    }
    return k;
}

int main() {
    int seq[30], fr[5], pos[5], used[5];
    int max, pf = 0, count = 1;
    float pfr;

    printf("Enter maximum limit of the sequence: ");
    scanf("%d", &max);

    printf("Enter the sequence: ");
    for (int i = 0; i < max; i++)
        scanf("%d", &seq[i]);

    printf("Enter number of frames: ");
    scanf("%d", &n);

    fr[0] = seq[0];
    pf++;
    printf("%d\t", fr[0]);

    int i = 1, p = 0;

    // Fill initial frames
    while (count < n) {
        int flag = 1;
        p++;
        for (int j = 0; j < i; j++) {
            if (seq[i] == seq[j]) {
                flag = 0;
                break;
            }
        }
        if (flag) {
            fr[count] = seq[i];
            printf("%d\t", fr[count]);
            count++;
            pf++;
        }
        i++;
    }

    printf("\n");

    // Optimal replacement
    for (i = p; i < max; i++) {
        int flag = 0;
        for (int j = 0; j < n; j++) {
            if (seq[i] == fr[j]) {
                flag = 1;
                break;
            }
        }

        if (!flag) {
            for (int j = 0; j < n; j++) {
                used[j] = 99999;  // Assign large default
                for (int k = i + 1; k < max; k++) {
                    if (fr[j] == seq[k]) {
                        used[j] = k;
                        break;
                    }
                }
            }

            int replaceIndex = findmax(used);
            fr[replaceIndex] = seq[i];
            pf++;

            for (int k = 0; k < n; k++)
                printf("%d\t", fr[k]);
            printf("\n");
        }
    }

    pfr = (float)pf / (float)max;
    printf("\nThe number of page faults is: %d", pf);
    printf("\nPage fault rate: %.2f\n", pfr);

    return 0;
}


 
OUTPUT: 
 
Enter number of page references -- 10 
Enter the reference string -- 1 2 3 4 5 2 5 2 5 1 4 3  
Enter the available no. of frames -- 3 
 
The Page Replacement Process is â€“ 
 
1 -1 -1 PF No. 1 
1 2 -1 PF No. 2 
1 2 3 PF No. 3 
4 2 3 PF No. 4 
5 2 3 PF No. 5 
5 2 3  
5 2 3  
5 2 1 PF No. 6 
5 2 4 PF No. 7 
5 2 3 PF No. 8 
 
Total number of page faults --          8