/* FIRST FIT, BEST FIT, WORST FIT*/ 


#include <stdio.h> 
#define MAX_PROCESS 10 
#define MAX_MEMORY_BLOCK 10 
// Function prototypes 
void firstFit(int process[], int m, int block[], int n); 
void bestFit(int process[], int m, int block[], int n); 
void worstFit(int process[], int m, int block[], int n); 
int main() { 
int process[MAX_PROCESS], block[MAX_MEMORY_BLOCK]; 
int m, n; 
printf("Enter number of processes: "); 
scanf("%d", &m); 
printf("Enter sizes of processes:\n"); 
for (int i = 0; i < m; i++)  
{ 
scanf("%d", &process[i]); 
} 
printf("Enter number of memory blocks: "); 
scanf("%d", &n); 
printf("Enter sizes of memory blocks:\n"); 
for (int i = 0; i < n; i++)  
{ 
scanf("%d", &block[i]); 
} 
printf("\nFirst Fit:\n"); 
firstFit(process, m, block, n); 
printf("\nBest Fit:\n"); 
bestFit(process, m, block, n); 
printf("\nWorst Fit:\n"); 
worstFit(process, m, block, n); 
return 0; 
} 
void firstFit(int process[], int m, int block[], int n)  
   { 
    int allocation[m]; 
 
    for (int i = 0; i < m; i++)  
    { 
        allocation[i] = -1; 
    } 
 
    for (int i = 0; i < m; i++)  
   { 
        for (int j = 0; j < n; j++)  
        { 
            if (block[j] >= process[i])  
            { 
                allocation[i] = j; 
                block[j] -= process[i]; 
                break; 
            } 
        } 
    } 
 
    printf("Process No.\tProcess Size\tBlock No.\n"); 
    for (int i = 0; i < m; i++)  
     { 
        printf("%d\t\t%d\t\t", i + 1, process[i]); 
        if (allocation[i] != -1)  
        { 
            printf("%d\n", allocation[i] + 1); 
        }  
        else  
        { 
            printf("Not Allocated\n"); 
        } 
    } 
} 
 
void bestFit(int process[], int m, int block[], int n)  
 { 
    int allocation[m]; 
 
    for (int i = 0; i < m; i++)  
    { 
        allocation[i] = -1; 
    } 
 
    for (int i = 0; i < m; i++)  
     { 
        int bestIdx = -1; 
        for (int j = 0; j < n; j++)  
         { 
            if (block[j] >= process[i])  
            { 
                if (bestIdx == -1 || block[j] < block[bestIdx])  
                { 
                    bestIdx = j; 
                } 
            } 
        } 
        if (bestIdx != -1)  
        { 
            allocation[i] = bestIdx; 
            block[bestIdx] -= process[i]; 
        } 
    } 
 
    printf("Process No.\tProcess Size\tBlock No.\n"); 
    for (int i = 0; i < m; i++)  
    { 
        printf("%d\t\t%d\t\t", i + 1, process[i]); 
        if (allocation[i] != -1)  
       { 
            printf("%d\n", allocation[i] + 1); 
        }  
        else  
       { 
            printf("Not Allocated\n"); 
        } 
    } 
} 
 
void worstFit(int process[], int m, int block[], int n)  
{ 
    int allocation[m]; 
 
    for (int i = 0; i < m; i++)  
    { 
        allocation[i] = -1; 
    } 
 
    for (int i = 0; i < m; i++)  
    { 
        int worstIdx = -1; 
        for (int j = 0; j < n; j++)  
        { 
            if (block[j] >= process[i])  
           { 
                if (worstIdx == -1 || block[j] > block[worstIdx])  
                { 
                    worstIdx = j; 
                } 
            } 
        } 
        if (worstIdx != -1)  
        { 
            allocation[i] = worstIdx; 
            block[worstIdx] -= process[i]; 
        } 
    } 
 
    printf("Process No.\tProcess Size\tBlock No.\n"); 
    for (int i = 0; i < m; i++)  
     { 
        printf("%d\t\t%d\t\t", i + 1, process[i]); 
        if (allocation[i] != -1)  
       { 
            printf("%d\n", allocation[i] + 1); 
        }  
        else  
        { 
            printf("Not Allocated\n"); 
        } 
    } 
} 



 
OUTPUT: 
 
Enter number of processes: 4 
Enter sizes of processes: 
100 
200 
300 
400 
Enter number of memory blocks: 5 
Enter sizes of memory blocks: 
150 
350 
200 
500 
100 
 
First Fit: 
Process No.     Process Size    Block No. 
1                100              1 
2                200              2 
3                300              4 
4                400             Not Allocated 
 
Best Fit: 
Process No.     Process Size    Block No. 
1                100              1 
2                200              3 
3                300              2 
4                400              4 
 
Worst Fit: 
Process No.     Process Size    Block No. 
1                100              5 
2                200              4 
3                300              2 
4                400              4 