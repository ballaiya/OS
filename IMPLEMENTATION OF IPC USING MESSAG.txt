/* IMPLEMENTATION OF IPC USING MESSAGE QUEUE*/


 
#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/types.h> 
#include <sys/ipc.h> 
#include <sys/msg.h> 
struct msg_buffer  
{ 
long msg_type; 
int data; 
}; 
int isPrime(int n)  
{ 
if (n <= 1) return 0; 
for (int i = 2; i * i <= n; i++) 
if (n % i == 0) return 0; 
return 1; 
} 
void sender()  
{ 
key_t key = ftok("progfile", 65); 
int msgid = msgget(key, 0666 | IPC_CREAT); 
int inputData; 
printf("Enter an integer to send: "); 
scanf("%d", &inputData); 
struct msg_buffer message = {1, inputData}; 
msgsnd(msgid, &message, sizeof(message), 0); 
msgrcv(msgid, &message, sizeof(message), 2, 0); 
printf("Received status from receiver: %s\n", message.data ? "Prime" : "Not 
Prime"); 
msgctl(msgid, IPC_RMID, NULL); 
} 
void receiver()  
{ 
key_t key = ftok("progfile", 65); 
int msgid = msgget(key, 0666 | IPC_CREAT); 
struct msg_buffer message; 
msgrcv(msgid, &message, sizeof(message), 1, 0); 
int isPrimeResult = isPrime(message.data); 
message.msg_type = 2; 
message.data = isPrimeResult; 
msgsnd(msgid, &message, sizeof(message), 0); 
} 
int main()  
{ 
pid_t pid = fork(); 
if (pid == -1)  
{ 
fprintf(stderr, "Fork failed\n"); 
exit(EXIT_FAILURE); 
} 
pid > 0 ? sender() : receiver(); 
return 0; 
} 


OUTPUT: 
Enter an integer to send:  
5 
Received status from receiver: Prime